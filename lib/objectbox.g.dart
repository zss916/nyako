// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entity/app_aic_entity.dart';
import 'database/entity/app_call_entity.dart';
import 'database/entity/app_conversation_entity.dart';
import 'database/entity/app_her_entity.dart';
import 'database/entity/app_login_entity.dart';
import 'database/entity/app_msg_entity.dart';
import 'database/entity/app_order_entity.dart';
import 'utils/point/point_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4645185528599979292),
      name: 'AicEntity',
      lastPropertyId: const IdUid(17, 789544278839905123),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4190469967703955420),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3883217963857846375),
            name: 'extra',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 661872627143663239),
            name: 'callCardCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8968737211974203668),
            name: 'aicId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7000209255525250502),
            name: 'isOnline',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5722753606341344018),
            name: 'muteStatus',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6382626005495576704),
            name: 'isCard',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8363462886894085766),
            name: 'propDuration',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2892770440151442826),
            name: 'isFollowed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 9193714790555645377),
            name: 'nickname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1151656719181172576),
            name: 'filename',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 8262833522975241684),
            name: 'portrait',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3684133362083108229),
            name: 'localPath',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 1781446584883739886),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 6702855826178053838),
            name: 'dateInsert',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8373661583738418438),
            name: 'playState',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 789544278839905123),
            name: 'rawData',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6956896169837176741),
      name: 'CallEntity',
      lastPropertyId: const IdUid(11, 3246564934484994380),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 27484943671886596),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7393727387667337401),
            name: 'dateInsert',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8387931153063852797),
            name: 'channelId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8995906877390618861),
            name: 'myId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4862254934664064383),
            name: 'herId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4181304551058407558),
            name: 'herVirtualId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 941880401051879106),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2600885998996181949),
            name: 'callType',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5671833798428275358),
            name: 'callStatus',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8455377456921558122),
            name: 'duration',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3246564934484994380),
            name: 'extra',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3385435895879980546),
      name: 'ConversationEntity',
      lastPropertyId: const IdUid(13, 4511121470458295869),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7018016764346520400),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7242467389329625619),
            name: 'dateInsert',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7541641963996115052),
            name: 'msgId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 7178428709069317892)),
        ModelProperty(
            id: const IdUid(4, 6046240687675796944),
            name: 'myId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5740486312075443517),
            name: 'herId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7724768076725336110),
            name: 'groupId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 464437149247455052)),
        ModelProperty(
            id: const IdUid(7, 9162323781451053262),
            name: 'sendType',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 318139032830956477),
            name: 'sendState',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1676332023493621754),
            name: 'unReadQuality',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4246803762870149637),
            name: 'top',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2732002042054612142),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5161822443727222934),
            name: 'lastMsgType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4511121470458295869),
            name: 'rawData',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5434608459422559795),
      name: 'HerEntity',
      lastPropertyId: const IdUid(5, 8768741452406499463),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6986283389522884262),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1588317537001325851),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 213863378496752751)),
        ModelProperty(
            id: const IdUid(3, 7178931446092703275),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8417702965654117072),
            name: 'portrait',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8768741452406499463),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5468358113559807168),
      name: 'MsgEntity',
      lastPropertyId: const IdUid(14, 2785548957778027055),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4222278837684045449),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9035315562431059355),
            name: 'dateInsert',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4162521996382164629),
            name: 'msgId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 3007828680681391933)),
        ModelProperty(
            id: const IdUid(4, 357458238849368112),
            name: 'myId',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 4492299173920489546)),
        ModelProperty(
            id: const IdUid(5, 713601042595322775),
            name: 'herId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1951929011788255510),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3156069037665045827),
            name: 'sendType',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1159031307674815435),
            name: 'sendState',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 754956812788919629),
            name: 'readState',
            type: 2,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1413973547121947857),
            name: 'msgType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2992088927975105250),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1831924299598774971),
            name: 'extra',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1943113434844584379),
            name: 'rawData',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 2785548957778027055),
            name: 'translateContent',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5233725647204490920),
      name: 'OrderEntity',
      lastPropertyId: const IdUid(13, 7250421239522946185),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 936482887733189928),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9208422666105939001),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2333435898155584661),
            name: 'orderNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4613263299795299988),
            name: 'productId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 467993990863309972),
            name: 'price',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6970242714899539706),
            name: 'currency',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1992197479689991996),
            name: 'payType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3418022591099268030),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1242529412888784681),
            name: 'payTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 135890594577418198),
            name: 'orderCreateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5469268041989700241),
            name: 'orderStatus',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5185641966243620077),
            name: 'isUploadServer',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7250421239522946185),
            name: 'dateInsert',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 657483295960695299),
      name: 'PointEntity',
      lastPropertyId: const IdUid(5, 6766934415452088570),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4264225074536156605),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1290293259186391701),
            name: 'probeType',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2231353321093069748),
            name: 'probeId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1494855540042243472),
            name: 'probeTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6766934415452088570),
            name: 'remark',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6538025228730448764),
      name: 'AppLoginEntity',
      lastPropertyId: const IdUid(14, 7373825898007040429),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5476135438396846727),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 918562462922597537),
            name: 'nickName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5907804693891787919),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(6, 3551830079957228773)),
        ModelProperty(
            id: const IdUid(4, 5805673725159799339),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4698225414615052874),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6394009696891679408),
            name: 'isGoogle',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1896243361638439465),
            name: 'isGust',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7853266732790996675),
            name: 'googleId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8035660739876373863),
            name: 'diamondCount',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4618394735310098300),
            name: 'lastLogin',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8228889954925213570),
            name: 'profileUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2682218236955358764),
            name: 'token',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 9120675349319714205),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7373825898007040429),
            name: 'loginTime',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(8, 6538025228730448764),
      lastIndexId: const IdUid(6, 3551830079957228773),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AicEntity: EntityDefinition<AicEntity>(
        model: _entities[0],
        toOneRelations: (AicEntity object) => [],
        toManyRelations: (AicEntity object) => {},
        getId: (AicEntity object) => object.id,
        setId: (AicEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AicEntity object, fb.Builder fbb) {
          final extraOffset =
              object.extra == null ? null : fbb.writeString(object.extra!);
          final nicknameOffset = object.nickname == null
              ? null
              : fbb.writeString(object.nickname!);
          final filenameOffset = object.filename == null
              ? null
              : fbb.writeString(object.filename!);
          final portraitOffset = object.portrait == null
              ? null
              : fbb.writeString(object.portrait!);
          final localPathOffset = object.localPath == null
              ? null
              : fbb.writeString(object.localPath!);
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final rawDataOffset = fbb.writeString(object.rawData);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, extraOffset);
          fbb.addInt64(2, object.callCardCount);
          fbb.addInt64(3, object.aicId);
          fbb.addInt64(4, object.isOnline);
          fbb.addInt64(5, object.muteStatus);
          fbb.addInt64(6, object.isCard);
          fbb.addInt64(7, object.propDuration);
          fbb.addBool(8, object.isFollowed);
          fbb.addOffset(9, nicknameOffset);
          fbb.addOffset(10, filenameOffset);
          fbb.addOffset(11, portraitOffset);
          fbb.addOffset(12, localPathOffset);
          fbb.addOffset(13, userIdOffset);
          fbb.addInt64(14, object.dateInsert);
          fbb.addInt64(15, object.playState);
          fbb.addOffset(16, rawDataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateInsertParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = AicEntity(dateInsertParam, id: idParam)
            ..extra = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..callCardCount =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..aicId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..isOnline =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..muteStatus =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14)
            ..isCard =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16)
            ..propDuration =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18)
            ..isFollowed =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20)
            ..nickname = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22)
            ..filename = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..portrait = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..localPath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28)
            ..userId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30)
            ..playState =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0)
            ..rawData = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 36, '');

          return object;
        }),
    CallEntity: EntityDefinition<CallEntity>(
        model: _entities[1],
        toOneRelations: (CallEntity object) => [],
        toManyRelations: (CallEntity object) => {},
        getId: (CallEntity object) => object.id,
        setId: (CallEntity object, int id) {
          object.id = id;
        },
        objectToFB: (CallEntity object, fb.Builder fbb) {
          final channelIdOffset = fbb.writeString(object.channelId);
          final myIdOffset = fbb.writeString(object.myId);
          final herIdOffset = fbb.writeString(object.herId);
          final herVirtualIdOffset = fbb.writeString(object.herVirtualId);
          final groupIdOffset = fbb.writeString(object.groupId);
          final durationOffset = fbb.writeString(object.duration);
          final extraOffset = fbb.writeString(object.extra);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateInsert);
          fbb.addOffset(2, channelIdOffset);
          fbb.addOffset(3, myIdOffset);
          fbb.addOffset(4, herIdOffset);
          fbb.addOffset(5, herVirtualIdOffset);
          fbb.addOffset(6, groupIdOffset);
          fbb.addInt8(7, object.callType);
          fbb.addInt64(8, object.callStatus);
          fbb.addOffset(9, durationOffset);
          fbb.addOffset(10, extraOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final myIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final herIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final herVirtualIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final channelIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final callTypeParam =
              const fb.Int8Reader().vTableGet(buffer, rootOffset, 18, 0);
          final callStatusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final dateInsertParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final durationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final extraParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final object = CallEntity(
              myId: myIdParam,
              herId: herIdParam,
              herVirtualId: herVirtualIdParam,
              channelId: channelIdParam,
              callType: callTypeParam,
              callStatus: callStatusParam,
              dateInsert: dateInsertParam,
              duration: durationParam,
              id: idParam,
              extra: extraParam)
            ..groupId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '');

          return object;
        }),
    ConversationEntity: EntityDefinition<ConversationEntity>(
        model: _entities[2],
        toOneRelations: (ConversationEntity object) => [],
        toManyRelations: (ConversationEntity object) => {},
        getId: (ConversationEntity object) => object.id,
        setId: (ConversationEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ConversationEntity object, fb.Builder fbb) {
          final msgIdOffset = fbb.writeString(object.msgId);
          final myIdOffset = fbb.writeString(object.myId);
          final herIdOffset = fbb.writeString(object.herId);
          final groupIdOffset = fbb.writeString(object.groupId);
          final contentOffset = fbb.writeString(object.content);
          final rawDataOffset = fbb.writeString(object.rawData);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateInsert);
          fbb.addOffset(2, msgIdOffset);
          fbb.addOffset(3, myIdOffset);
          fbb.addOffset(4, herIdOffset);
          fbb.addOffset(5, groupIdOffset);
          fbb.addInt8(6, object.sendType);
          fbb.addInt8(7, object.sendState);
          fbb.addInt64(8, object.unReadQuality);
          fbb.addInt64(9, object.top);
          fbb.addOffset(10, contentOffset);
          fbb.addInt64(11, object.lastMsgType);
          fbb.addOffset(12, rawDataOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final myIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final herIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sendTypeParam =
              const fb.Int8Reader().vTableGet(buffer, rootOffset, 16, 0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final dateInsertParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final rawDataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final lastMsgTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final sendStateParam =
              const fb.Int8Reader().vTableGet(buffer, rootOffset, 18, 0);
          final unReadQualityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final topParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = ConversationEntity(myIdParam, herIdParam,
              sendTypeParam, contentParam, dateInsertParam, rawDataParam,
              id: idParam,
              lastMsgType: lastMsgTypeParam,
              sendState: sendStateParam,
              unReadQuality: unReadQualityParam,
              top: topParam)
            ..msgId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..groupId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');

          return object;
        }),
    HerEntity: EntityDefinition<HerEntity>(
        model: _entities[3],
        toOneRelations: (HerEntity object) => [],
        toManyRelations: (HerEntity object) => {},
        getId: (HerEntity object) => object.id,
        setId: (HerEntity object, int id) {
          object.id = id;
        },
        objectToFB: (HerEntity object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final portraitOffset = object.portrait == null
              ? null
              : fbb.writeString(object.portrait!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, portraitOffset);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final portraitParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final object = HerEntity(nameParam, uidParam,
              id: idParam, portrait: portraitParam, date: dateParam);

          return object;
        }),
    MsgEntity: EntityDefinition<MsgEntity>(
        model: _entities[4],
        toOneRelations: (MsgEntity object) => [],
        toManyRelations: (MsgEntity object) => {},
        getId: (MsgEntity object) => object.id,
        setId: (MsgEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MsgEntity object, fb.Builder fbb) {
          final msgIdOffset = fbb.writeString(object.msgId);
          final myIdOffset = fbb.writeString(object.myId);
          final herIdOffset = fbb.writeString(object.herId);
          final groupIdOffset = fbb.writeString(object.groupId);
          final contentOffset = fbb.writeString(object.content);
          final extraOffset =
              object.extra == null ? null : fbb.writeString(object.extra!);
          final rawDataOffset = fbb.writeString(object.rawData);
          final translateContentOffset = object.translateContent == null
              ? null
              : fbb.writeString(object.translateContent!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateInsert);
          fbb.addOffset(2, msgIdOffset);
          fbb.addOffset(3, myIdOffset);
          fbb.addOffset(4, herIdOffset);
          fbb.addOffset(5, groupIdOffset);
          fbb.addInt8(6, object.sendType);
          fbb.addInt8(7, object.sendState);
          fbb.addInt8(8, object.readState);
          fbb.addInt64(9, object.msgType);
          fbb.addOffset(10, contentOffset);
          fbb.addOffset(11, extraOffset);
          fbb.addOffset(12, rawDataOffset);
          fbb.addOffset(13, translateContentOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final myIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final herIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sendTypeParam =
              const fb.Int8Reader().vTableGet(buffer, rootOffset, 16, 0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final dateInsertParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final rawDataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 28, '');
          final msgTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final sendStateParam =
              const fb.Int8Reader().vTableGet(buffer, rootOffset, 18, 0);
          final readStateParam =
              const fb.Int8Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = MsgEntity(myIdParam, herIdParam, sendTypeParam,
              contentParam, dateInsertParam, rawDataParam, msgTypeParam,
              id: idParam, sendState: sendStateParam, readState: readStateParam)
            ..msgId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..groupId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..extra = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..translateContent = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 30);

          return object;
        }),
    OrderEntity: EntityDefinition<OrderEntity>(
        model: _entities[5],
        toOneRelations: (OrderEntity object) => [],
        toManyRelations: (OrderEntity object) => {},
        getId: (OrderEntity object) => object.id,
        setId: (OrderEntity object, int id) {
          object.id = id;
        },
        objectToFB: (OrderEntity object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final orderNoOffset =
              object.orderNo == null ? null : fbb.writeString(object.orderNo!);
          final productIdOffset = object.productId == null
              ? null
              : fbb.writeString(object.productId!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final currencyOffset = object.currency == null
              ? null
              : fbb.writeString(object.currency!);
          final payTypeOffset =
              object.payType == null ? null : fbb.writeString(object.payType!);
          final typeOffset =
              object.type == null ? null : fbb.writeString(object.type!);
          final payTimeOffset =
              object.payTime == null ? null : fbb.writeString(object.payTime!);
          final orderCreateTimeOffset = object.orderCreateTime == null
              ? null
              : fbb.writeString(object.orderCreateTime!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, orderNoOffset);
          fbb.addOffset(3, productIdOffset);
          fbb.addOffset(4, priceOffset);
          fbb.addOffset(5, currencyOffset);
          fbb.addOffset(6, payTypeOffset);
          fbb.addOffset(7, typeOffset);
          fbb.addOffset(8, payTimeOffset);
          fbb.addOffset(9, orderCreateTimeOffset);
          fbb.addInt64(10, object.orderStatus);
          fbb.addBool(11, object.isUploadServer);
          fbb.addInt64(12, object.dateInsert);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final orderNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final productIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final priceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final payTypeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final payTimeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final orderCreateTimeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final dateInsertParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final object = OrderEntity(
              id: idParam,
              userId: userIdParam,
              orderNo: orderNoParam,
              productId: productIdParam,
              price: priceParam,
              currency: currencyParam,
              payType: payTypeParam,
              type: typeParam,
              payTime: payTimeParam,
              orderCreateTime: orderCreateTimeParam,
              dateInsert: dateInsertParam)
            ..orderStatus =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24)
            ..isUploadServer =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26);

          return object;
        }),
    PointEntity: EntityDefinition<PointEntity>(
        model: _entities[6],
        toOneRelations: (PointEntity object) => [],
        toManyRelations: (PointEntity object) => {},
        getId: (PointEntity object) => object.id,
        setId: (PointEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PointEntity object, fb.Builder fbb) {
          final remarkOffset =
              object.remark == null ? null : fbb.writeString(object.remark!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.probeType);
          fbb.addInt64(2, object.probeId);
          fbb.addInt64(3, object.probeTime);
          fbb.addOffset(4, remarkOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final probeTypeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final probeIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final probeTimeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final remarkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = PointEntity(
              id: idParam,
              probeType: probeTypeParam,
              probeId: probeIdParam,
              probeTime: probeTimeParam,
              remark: remarkParam);

          return object;
        }),
    AppLoginEntity: EntityDefinition<AppLoginEntity>(
        model: _entities[7],
        toOneRelations: (AppLoginEntity object) => [],
        toManyRelations: (AppLoginEntity object) => {},
        getId: (AppLoginEntity object) => object.id,
        setId: (AppLoginEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AppLoginEntity object, fb.Builder fbb) {
          final nickNameOffset = object.nickName == null
              ? null
              : fbb.writeString(object.nickName!);
          final userIdOffset = fbb.writeString(object.userId);
          final userNameOffset = object.userName == null
              ? null
              : fbb.writeString(object.userName!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final googleIdOffset = object.googleId == null
              ? null
              : fbb.writeString(object.googleId!);
          final diamondCountOffset = object.diamondCount == null
              ? null
              : fbb.writeString(object.diamondCount!);
          final profileUrlOffset = object.profileUrl == null
              ? null
              : fbb.writeString(object.profileUrl!);
          final tokenOffset =
              object.token == null ? null : fbb.writeString(object.token!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nickNameOffset);
          fbb.addOffset(2, userIdOffset);
          fbb.addOffset(3, userNameOffset);
          fbb.addOffset(4, passwordOffset);
          fbb.addBool(5, object.isGoogle);
          fbb.addBool(6, object.isGust);
          fbb.addOffset(7, googleIdOffset);
          fbb.addOffset(8, diamondCountOffset);
          fbb.addBool(9, object.lastLogin);
          fbb.addOffset(10, profileUrlOffset);
          fbb.addOffset(11, tokenOffset);
          fbb.addOffset(12, emailOffset);
          fbb.addInt64(13, object.loginTime);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final loginTimeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final object = AppLoginEntity(
              id: idParam, userId: userIdParam, loginTime: loginTimeParam)
            ..nickName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..userName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..isGoogle =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14)
            ..isGust =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16)
            ..googleId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..diamondCount = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..lastLogin =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22)
            ..profileUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 24)
            ..token = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 26)
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 28);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AicEntity] entity fields to define ObjectBox queries.
class AicEntity_ {
  /// see [AicEntity.id]
  static final id = QueryIntegerProperty<AicEntity>(_entities[0].properties[0]);

  /// see [AicEntity.extra]
  static final extra =
      QueryStringProperty<AicEntity>(_entities[0].properties[1]);

  /// see [AicEntity.callCardCount]
  static final callCardCount =
      QueryIntegerProperty<AicEntity>(_entities[0].properties[2]);

  /// see [AicEntity.aicId]
  static final aicId =
      QueryIntegerProperty<AicEntity>(_entities[0].properties[3]);

  /// see [AicEntity.isOnline]
  static final isOnline =
      QueryIntegerProperty<AicEntity>(_entities[0].properties[4]);

  /// see [AicEntity.muteStatus]
  static final muteStatus =
      QueryIntegerProperty<AicEntity>(_entities[0].properties[5]);

  /// see [AicEntity.isCard]
  static final isCard =
      QueryIntegerProperty<AicEntity>(_entities[0].properties[6]);

  /// see [AicEntity.propDuration]
  static final propDuration =
      QueryIntegerProperty<AicEntity>(_entities[0].properties[7]);

  /// see [AicEntity.isFollowed]
  static final isFollowed =
      QueryBooleanProperty<AicEntity>(_entities[0].properties[8]);

  /// see [AicEntity.nickname]
  static final nickname =
      QueryStringProperty<AicEntity>(_entities[0].properties[9]);

  /// see [AicEntity.filename]
  static final filename =
      QueryStringProperty<AicEntity>(_entities[0].properties[10]);

  /// see [AicEntity.portrait]
  static final portrait =
      QueryStringProperty<AicEntity>(_entities[0].properties[11]);

  /// see [AicEntity.localPath]
  static final localPath =
      QueryStringProperty<AicEntity>(_entities[0].properties[12]);

  /// see [AicEntity.userId]
  static final userId =
      QueryStringProperty<AicEntity>(_entities[0].properties[13]);

  /// see [AicEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<AicEntity>(_entities[0].properties[14]);

  /// see [AicEntity.playState]
  static final playState =
      QueryIntegerProperty<AicEntity>(_entities[0].properties[15]);

  /// see [AicEntity.rawData]
  static final rawData =
      QueryStringProperty<AicEntity>(_entities[0].properties[16]);
}

/// [CallEntity] entity fields to define ObjectBox queries.
class CallEntity_ {
  /// see [CallEntity.id]
  static final id =
      QueryIntegerProperty<CallEntity>(_entities[1].properties[0]);

  /// see [CallEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<CallEntity>(_entities[1].properties[1]);

  /// see [CallEntity.channelId]
  static final channelId =
      QueryStringProperty<CallEntity>(_entities[1].properties[2]);

  /// see [CallEntity.myId]
  static final myId =
      QueryStringProperty<CallEntity>(_entities[1].properties[3]);

  /// see [CallEntity.herId]
  static final herId =
      QueryStringProperty<CallEntity>(_entities[1].properties[4]);

  /// see [CallEntity.herVirtualId]
  static final herVirtualId =
      QueryStringProperty<CallEntity>(_entities[1].properties[5]);

  /// see [CallEntity.groupId]
  static final groupId =
      QueryStringProperty<CallEntity>(_entities[1].properties[6]);

  /// see [CallEntity.callType]
  static final callType =
      QueryIntegerProperty<CallEntity>(_entities[1].properties[7]);

  /// see [CallEntity.callStatus]
  static final callStatus =
      QueryIntegerProperty<CallEntity>(_entities[1].properties[8]);

  /// see [CallEntity.duration]
  static final duration =
      QueryStringProperty<CallEntity>(_entities[1].properties[9]);

  /// see [CallEntity.extra]
  static final extra =
      QueryStringProperty<CallEntity>(_entities[1].properties[10]);
}

/// [ConversationEntity] entity fields to define ObjectBox queries.
class ConversationEntity_ {
  /// see [ConversationEntity.id]
  static final id =
      QueryIntegerProperty<ConversationEntity>(_entities[2].properties[0]);

  /// see [ConversationEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<ConversationEntity>(_entities[2].properties[1]);

  /// see [ConversationEntity.msgId]
  static final msgId =
      QueryStringProperty<ConversationEntity>(_entities[2].properties[2]);

  /// see [ConversationEntity.myId]
  static final myId =
      QueryStringProperty<ConversationEntity>(_entities[2].properties[3]);

  /// see [ConversationEntity.herId]
  static final herId =
      QueryStringProperty<ConversationEntity>(_entities[2].properties[4]);

  /// see [ConversationEntity.groupId]
  static final groupId =
      QueryStringProperty<ConversationEntity>(_entities[2].properties[5]);

  /// see [ConversationEntity.sendType]
  static final sendType =
      QueryIntegerProperty<ConversationEntity>(_entities[2].properties[6]);

  /// see [ConversationEntity.sendState]
  static final sendState =
      QueryIntegerProperty<ConversationEntity>(_entities[2].properties[7]);

  /// see [ConversationEntity.unReadQuality]
  static final unReadQuality =
      QueryIntegerProperty<ConversationEntity>(_entities[2].properties[8]);

  /// see [ConversationEntity.top]
  static final top =
      QueryIntegerProperty<ConversationEntity>(_entities[2].properties[9]);

  /// see [ConversationEntity.content]
  static final content =
      QueryStringProperty<ConversationEntity>(_entities[2].properties[10]);

  /// see [ConversationEntity.lastMsgType]
  static final lastMsgType =
      QueryIntegerProperty<ConversationEntity>(_entities[2].properties[11]);

  /// see [ConversationEntity.rawData]
  static final rawData =
      QueryStringProperty<ConversationEntity>(_entities[2].properties[12]);
}

/// [HerEntity] entity fields to define ObjectBox queries.
class HerEntity_ {
  /// see [HerEntity.id]
  static final id = QueryIntegerProperty<HerEntity>(_entities[3].properties[0]);

  /// see [HerEntity.uid]
  static final uid = QueryStringProperty<HerEntity>(_entities[3].properties[1]);

  /// see [HerEntity.name]
  static final name =
      QueryStringProperty<HerEntity>(_entities[3].properties[2]);

  /// see [HerEntity.portrait]
  static final portrait =
      QueryStringProperty<HerEntity>(_entities[3].properties[3]);

  /// see [HerEntity.date]
  static final date =
      QueryIntegerProperty<HerEntity>(_entities[3].properties[4]);
}

/// [MsgEntity] entity fields to define ObjectBox queries.
class MsgEntity_ {
  /// see [MsgEntity.id]
  static final id = QueryIntegerProperty<MsgEntity>(_entities[4].properties[0]);

  /// see [MsgEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<MsgEntity>(_entities[4].properties[1]);

  /// see [MsgEntity.msgId]
  static final msgId =
      QueryStringProperty<MsgEntity>(_entities[4].properties[2]);

  /// see [MsgEntity.myId]
  static final myId =
      QueryStringProperty<MsgEntity>(_entities[4].properties[3]);

  /// see [MsgEntity.herId]
  static final herId =
      QueryStringProperty<MsgEntity>(_entities[4].properties[4]);

  /// see [MsgEntity.groupId]
  static final groupId =
      QueryStringProperty<MsgEntity>(_entities[4].properties[5]);

  /// see [MsgEntity.sendType]
  static final sendType =
      QueryIntegerProperty<MsgEntity>(_entities[4].properties[6]);

  /// see [MsgEntity.sendState]
  static final sendState =
      QueryIntegerProperty<MsgEntity>(_entities[4].properties[7]);

  /// see [MsgEntity.readState]
  static final readState =
      QueryIntegerProperty<MsgEntity>(_entities[4].properties[8]);

  /// see [MsgEntity.msgType]
  static final msgType =
      QueryIntegerProperty<MsgEntity>(_entities[4].properties[9]);

  /// see [MsgEntity.content]
  static final content =
      QueryStringProperty<MsgEntity>(_entities[4].properties[10]);

  /// see [MsgEntity.extra]
  static final extra =
      QueryStringProperty<MsgEntity>(_entities[4].properties[11]);

  /// see [MsgEntity.rawData]
  static final rawData =
      QueryStringProperty<MsgEntity>(_entities[4].properties[12]);

  /// see [MsgEntity.translateContent]
  static final translateContent =
      QueryStringProperty<MsgEntity>(_entities[4].properties[13]);
}

/// [OrderEntity] entity fields to define ObjectBox queries.
class OrderEntity_ {
  /// see [OrderEntity.id]
  static final id =
      QueryIntegerProperty<OrderEntity>(_entities[5].properties[0]);

  /// see [OrderEntity.userId]
  static final userId =
      QueryStringProperty<OrderEntity>(_entities[5].properties[1]);

  /// see [OrderEntity.orderNo]
  static final orderNo =
      QueryStringProperty<OrderEntity>(_entities[5].properties[2]);

  /// see [OrderEntity.productId]
  static final productId =
      QueryStringProperty<OrderEntity>(_entities[5].properties[3]);

  /// see [OrderEntity.price]
  static final price =
      QueryStringProperty<OrderEntity>(_entities[5].properties[4]);

  /// see [OrderEntity.currency]
  static final currency =
      QueryStringProperty<OrderEntity>(_entities[5].properties[5]);

  /// see [OrderEntity.payType]
  static final payType =
      QueryStringProperty<OrderEntity>(_entities[5].properties[6]);

  /// see [OrderEntity.type]
  static final type =
      QueryStringProperty<OrderEntity>(_entities[5].properties[7]);

  /// see [OrderEntity.payTime]
  static final payTime =
      QueryStringProperty<OrderEntity>(_entities[5].properties[8]);

  /// see [OrderEntity.orderCreateTime]
  static final orderCreateTime =
      QueryStringProperty<OrderEntity>(_entities[5].properties[9]);

  /// see [OrderEntity.orderStatus]
  static final orderStatus =
      QueryIntegerProperty<OrderEntity>(_entities[5].properties[10]);

  /// see [OrderEntity.isUploadServer]
  static final isUploadServer =
      QueryBooleanProperty<OrderEntity>(_entities[5].properties[11]);

  /// see [OrderEntity.dateInsert]
  static final dateInsert =
      QueryIntegerProperty<OrderEntity>(_entities[5].properties[12]);
}

/// [PointEntity] entity fields to define ObjectBox queries.
class PointEntity_ {
  /// see [PointEntity.id]
  static final id =
      QueryIntegerProperty<PointEntity>(_entities[6].properties[0]);

  /// see [PointEntity.probeType]
  static final probeType =
      QueryIntegerProperty<PointEntity>(_entities[6].properties[1]);

  /// see [PointEntity.probeId]
  static final probeId =
      QueryIntegerProperty<PointEntity>(_entities[6].properties[2]);

  /// see [PointEntity.probeTime]
  static final probeTime =
      QueryIntegerProperty<PointEntity>(_entities[6].properties[3]);

  /// see [PointEntity.remark]
  static final remark =
      QueryStringProperty<PointEntity>(_entities[6].properties[4]);
}

/// [AppLoginEntity] entity fields to define ObjectBox queries.
class AppLoginEntity_ {
  /// see [AppLoginEntity.id]
  static final id =
      QueryIntegerProperty<AppLoginEntity>(_entities[7].properties[0]);

  /// see [AppLoginEntity.nickName]
  static final nickName =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[1]);

  /// see [AppLoginEntity.userId]
  static final userId =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[2]);

  /// see [AppLoginEntity.userName]
  static final userName =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[3]);

  /// see [AppLoginEntity.password]
  static final password =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[4]);

  /// see [AppLoginEntity.isGoogle]
  static final isGoogle =
      QueryBooleanProperty<AppLoginEntity>(_entities[7].properties[5]);

  /// see [AppLoginEntity.isGust]
  static final isGust =
      QueryBooleanProperty<AppLoginEntity>(_entities[7].properties[6]);

  /// see [AppLoginEntity.googleId]
  static final googleId =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[7]);

  /// see [AppLoginEntity.diamondCount]
  static final diamondCount =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[8]);

  /// see [AppLoginEntity.lastLogin]
  static final lastLogin =
      QueryBooleanProperty<AppLoginEntity>(_entities[7].properties[9]);

  /// see [AppLoginEntity.profileUrl]
  static final profileUrl =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[10]);

  /// see [AppLoginEntity.token]
  static final token =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[11]);

  /// see [AppLoginEntity.email]
  static final email =
      QueryStringProperty<AppLoginEntity>(_entities[7].properties[12]);

  /// see [AppLoginEntity.loginTime]
  static final loginTime =
      QueryIntegerProperty<AppLoginEntity>(_entities[7].properties[13]);
}

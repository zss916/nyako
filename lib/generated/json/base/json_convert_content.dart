// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:oliapro/agora/rtm_msg_entity.dart';
import 'package:oliapro/entities/app_ai_config_entity.dart';
import 'package:oliapro/entities/app_aiv_entity.dart';
import 'package:oliapro/entities/app_balance_list_entity.dart';
import 'package:oliapro/entities/app_banner_entity.dart';
import 'package:oliapro/entities/app_call_record_entity.dart';
import 'package:oliapro/entities/app_card_entity.dart';
import 'package:oliapro/entities/app_charge_entity.dart';
import 'package:oliapro/entities/app_charge_quick_entity.dart';
import 'package:oliapro/entities/app_config_entity.dart';
import 'package:oliapro/entities/app_contribute_entity.dart';
import 'package:oliapro/entities/app_draw_entity.dart';
import 'package:oliapro/entities/app_draw_user_entity.dart';
import 'package:oliapro/entities/app_end_call_entity.dart';
import 'package:oliapro/entities/app_gift_entity.dart';
import 'package:oliapro/entities/app_host_entity.dart';
import 'package:oliapro/entities/app_host_match_limit_entity.dart';
import 'package:oliapro/entities/app_hot_entity.dart';
import 'package:oliapro/entities/app_info_entity.dart';
import 'package:oliapro/entities/app_invite_info_entity.dart';
import 'package:oliapro/entities/app_leval_entity.dart';
import 'package:oliapro/entities/app_link_content_entity.dart';
import 'package:oliapro/entities/app_login_entity.dart';
import 'package:oliapro/entities/app_match_host_entity.dart';
import 'package:oliapro/entities/app_moment_entity.dart';
import 'package:oliapro/entities/app_order_check_entity.dart';
import 'package:oliapro/entities/app_order_entity.dart';
import 'package:oliapro/entities/app_oss_entity.dart';
import 'package:oliapro/entities/app_recharge_active_config_entity.dart';
import 'package:oliapro/entities/app_send_gift_result.dart';
import 'package:oliapro/entities/app_sensitive_word_entity.dart';
import 'package:oliapro/entities/app_sign_card_entity.dart';
import 'package:oliapro/entities/app_translate_entity.dart';
import 'package:oliapro/entities/app_vip_dart_entity.dart';
import 'package:oliapro/entities/sign_entity.dart';
import 'package:oliapro/socket/socket_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(
    Object error, StackTrace stackTrace);

extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<RTMText>[] is M) {
      return data
          .map<RTMText>((Map<String, dynamic> e) => RTMText.fromJson(e))
          .toList() as M;
    }
    if (<RTMUser>[] is M) {
      return data
          .map<RTMUser>((Map<String, dynamic> e) => RTMUser.fromJson(e))
          .toList() as M;
    }
    if (<RTMMsgText>[] is M) {
      return data
          .map<RTMMsgText>((Map<String, dynamic> e) => RTMMsgText.fromJson(e))
          .toList() as M;
    }
    if (<RTMMsgVoice>[] is M) {
      return data
          .map<RTMMsgVoice>((Map<String, dynamic> e) => RTMMsgVoice.fromJson(e))
          .toList() as M;
    }
    if (<RTMMsgPhoto>[] is M) {
      return data
          .map<RTMMsgPhoto>((Map<String, dynamic> e) => RTMMsgPhoto.fromJson(e))
          .toList() as M;
    }
    if (<RTMMsgCallState>[] is M) {
      return data
          .map<RTMMsgCallState>(
              (Map<String, dynamic> e) => RTMMsgCallState.fromJson(e))
          .toList() as M;
    }
    if (<RTMMsgGift>[] is M) {
      return data
          .map<RTMMsgGift>((Map<String, dynamic> e) => RTMMsgGift.fromJson(e))
          .toList() as M;
    }
    if (<RTMMsgBeginCall>[] is M) {
      return data
          .map<RTMMsgBeginCall>(
              (Map<String, dynamic> e) => RTMMsgBeginCall.fromJson(e))
          .toList() as M;
    }
    if (<RTMMsgAIB>[] is M) {
      return data
          .map<RTMMsgAIB>((Map<String, dynamic> e) => RTMMsgAIB.fromJson(e))
          .toList() as M;
    }
    if (<RTMMsgAIC>[] is M) {
      return data
          .map<RTMMsgAIC>((Map<String, dynamic> e) => RTMMsgAIC.fromJson(e))
          .toList() as M;
    }
    if (<AiConfigEntity>[] is M) {
      return data
          .map<AiConfigEntity>(
              (Map<String, dynamic> e) => AiConfigEntity.fromJson(e))
          .toList() as M;
    }
    if (<AiConfigGroups>[] is M) {
      return data
          .map<AiConfigGroups>(
              (Map<String, dynamic> e) => AiConfigGroups.fromJson(e))
          .toList() as M;
    }
    if (<AiConfigGroupsItem>[] is M) {
      return data
          .map<AiConfigGroupsItem>(
              (Map<String, dynamic> e) => AiConfigGroupsItem.fromJson(e))
          .toList() as M;
    }
    if (<AivBean>[] is M) {
      return data
          .map<AivBean>((Map<String, dynamic> e) => AivBean.fromJson(e))
          .toList() as M;
    }
    if (<BalanceListEntity>[] is M) {
      return data
          .map<BalanceListEntity>(
              (Map<String, dynamic> e) => BalanceListEntity.fromJson(e))
          .toList() as M;
    }
    if (<BalanceListData>[] is M) {
      return data
          .map<BalanceListData>(
              (Map<String, dynamic> e) => BalanceListData.fromJson(e))
          .toList() as M;
    }
    if (<BannerBean>[] is M) {
      return data
          .map<BannerBean>((Map<String, dynamic> e) => BannerBean.fromJson(e))
          .toList() as M;
    }
    if (<CallRecordEntity>[] is M) {
      return data
          .map<CallRecordEntity>(
              (Map<String, dynamic> e) => CallRecordEntity.fromJson(e))
          .toList() as M;
    }
    if (<CardBean>[] is M) {
      return data
          .map<CardBean>((Map<String, dynamic> e) => CardBean.fromJson(e))
          .toList() as M;
    }
    if (<PayChannelBean>[] is M) {
      return data
          .map<PayChannelBean>(
              (Map<String, dynamic> e) => PayChannelBean.fromJson(e))
          .toList() as M;
    }
    if (<PayCommoditeBean>[] is M) {
      return data
          .map<PayCommoditeBean>(
              (Map<String, dynamic> e) => PayCommoditeBean.fromJson(e))
          .toList() as M;
    }
    if (<CreateOrderBean>[] is M) {
      return data
          .map<CreateOrderBean>(
              (Map<String, dynamic> e) => CreateOrderBean.fromJson(e))
          .toList() as M;
    }
    if (<PayCutCommodite>[] is M) {
      return data
          .map<PayCutCommodite>(
              (Map<String, dynamic> e) => PayCutCommodite.fromJson(e))
          .toList() as M;
    }
    if (<PayCutChannel>[] is M) {
      return data
          .map<PayCutChannel>(
              (Map<String, dynamic> e) => PayCutChannel.fromJson(e))
          .toList() as M;
    }
    if (<PayQuickData>[] is M) {
      return data
          .map<PayQuickData>(
              (Map<String, dynamic> e) => PayQuickData.fromJson(e))
          .toList() as M;
    }
    if (<PayQuickCommodite>[] is M) {
      return data
          .map<PayQuickCommodite>(
              (Map<String, dynamic> e) => PayQuickCommodite.fromJson(e))
          .toList() as M;
    }
    if (<PayQuickChannel>[] is M) {
      return data
          .map<PayQuickChannel>(
              (Map<String, dynamic> e) => PayQuickChannel.fromJson(e))
          .toList() as M;
    }
    if (<DiamondCardBean>[] is M) {
      return data
          .map<DiamondCardBean>(
              (Map<String, dynamic> e) => DiamondCardBean.fromJson(e))
          .toList() as M;
    }
    if (<ConfigData>[] is M) {
      return data
          .map<ConfigData>((Map<String, dynamic> e) => ConfigData.fromJson(e))
          .toList() as M;
    }
    if (<AppUpdate>[] is M) {
      return data
          .map<AppUpdate>((Map<String, dynamic> e) => AppUpdate.fromJson(e))
          .toList() as M;
    }
    if (<PayScale>[] is M) {
      return data
          .map<PayScale>((Map<String, dynamic> e) => PayScale.fromJson(e))
          .toList() as M;
    }
    if (<ContributeEntity>[] is M) {
      return data
          .map<ContributeEntity>(
              (Map<String, dynamic> e) => ContributeEntity.fromJson(e))
          .toList() as M;
    }
    if (<DrawEntity>[] is M) {
      return data
          .map<DrawEntity>((Map<String, dynamic> e) => DrawEntity.fromJson(e))
          .toList() as M;
    }
    if (<DrawData>[] is M) {
      return data
          .map<DrawData>((Map<String, dynamic> e) => DrawData.fromJson(e))
          .toList() as M;
    }
    if (<DrawUserEntity>[] is M) {
      return data
          .map<DrawUserEntity>(
              (Map<String, dynamic> e) => DrawUserEntity.fromJson(e))
          .toList() as M;
    }
    if (<EndCallEntity>[] is M) {
      return data
          .map<EndCallEntity>(
              (Map<String, dynamic> e) => EndCallEntity.fromJson(e))
          .toList() as M;
    }
    if (<GiftEntity>[] is M) {
      return data
          .map<GiftEntity>((Map<String, dynamic> e) => GiftEntity.fromJson(e))
          .toList() as M;
    }
    if (<HostDetail>[] is M) {
      return data
          .map<HostDetail>((Map<String, dynamic> e) => HostDetail.fromJson(e))
          .toList() as M;
    }
    if (<HostMedia>[] is M) {
      return data
          .map<HostMedia>((Map<String, dynamic> e) => HostMedia.fromJson(e))
          .toList() as M;
    }
    if (<HostTag>[] is M) {
      return data
          .map<HostTag>((Map<String, dynamic> e) => HostTag.fromJson(e))
          .toList() as M;
    }
    if (<HostMatchLimitEntity>[] is M) {
      return data
          .map<HostMatchLimitEntity>(
              (Map<String, dynamic> e) => HostMatchLimitEntity.fromJson(e))
          .toList() as M;
    }
    if (<HostMatchLimitEntityAnchor>[] is M) {
      return data
          .map<HostMatchLimitEntityAnchor>((Map<String, dynamic> e) =>
              HostMatchLimitEntityAnchor.fromJson(e))
          .toList() as M;
    }
    if (<UpListData>[] is M) {
      return data
          .map<UpListData>((Map<String, dynamic> e) => UpListData.fromJson(e))
          .toList() as M;
    }
    if (<AreaData>[] is M) {
      return data
          .map<AreaData>((Map<String, dynamic> e) => AreaData.fromJson(e))
          .toList() as M;
    }
    if (<InfoDetail>[] is M) {
      return data
          .map<InfoDetail>((Map<String, dynamic> e) => InfoDetail.fromJson(e))
          .toList() as M;
    }
    if (<BalanceBean>[] is M) {
      return data
          .map<BalanceBean>((Map<String, dynamic> e) => BalanceBean.fromJson(e))
          .toList() as M;
    }
    if (<InviteInfoEntity>[] is M) {
      return data
          .map<InviteInfoEntity>(
              (Map<String, dynamic> e) => InviteInfoEntity.fromJson(e))
          .toList() as M;
    }
    if (<LevalBean>[] is M) {
      return data
          .map<LevalBean>((Map<String, dynamic> e) => LevalBean.fromJson(e))
          .toList() as M;
    }
    if (<LinkContent>[] is M) {
      return data
          .map<LinkContent>((Map<String, dynamic> e) => LinkContent.fromJson(e))
          .toList() as M;
    }
    if (<Login>[] is M) {
      return data
          .map<Login>((Map<String, dynamic> e) => Login.fromJson(e))
          .toList() as M;
    }
    if (<LoginToken>[] is M) {
      return data
          .map<LoginToken>((Map<String, dynamic> e) => LoginToken.fromJson(e))
          .toList() as M;
    }
    if (<LoginUser>[] is M) {
      return data
          .map<LoginUser>((Map<String, dynamic> e) => LoginUser.fromJson(e))
          .toList() as M;
    }
    if (<MatchHost>[] is M) {
      return data
          .map<MatchHost>((Map<String, dynamic> e) => MatchHost.fromJson(e))
          .toList() as M;
    }
    if (<MomentDetail>[] is M) {
      return data
          .map<MomentDetail>(
              (Map<String, dynamic> e) => MomentDetail.fromJson(e))
          .toList() as M;
    }
    if (<MomentMedia>[] is M) {
      return data
          .map<MomentMedia>((Map<String, dynamic> e) => MomentMedia.fromJson(e))
          .toList() as M;
    }
    if (<OrderCheckEntity>[] is M) {
      return data
          .map<OrderCheckEntity>(
              (Map<String, dynamic> e) => OrderCheckEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderBean>[] is M) {
      return data
          .map<OrderBean>((Map<String, dynamic> e) => OrderBean.fromJson(e))
          .toList() as M;
    }
    if (<OrderData>[] is M) {
      return data
          .map<OrderData>((Map<String, dynamic> e) => OrderData.fromJson(e))
          .toList() as M;
    }
    if (<CostBean>[] is M) {
      return data
          .map<CostBean>((Map<String, dynamic> e) => CostBean.fromJson(e))
          .toList() as M;
    }
    if (<OssConfig>[] is M) {
      return data
          .map<OssConfig>((Map<String, dynamic> e) => OssConfig.fromJson(e))
          .toList() as M;
    }
    if (<AppRechargeActiveConfigEntity>[] is M) {
      return data
          .map<AppRechargeActiveConfigEntity>((Map<String, dynamic> e) =>
              AppRechargeActiveConfigEntity.fromJson(e))
          .toList() as M;
    }
    if (<SendGiftResult>[] is M) {
      return data
          .map<SendGiftResult>(
              (Map<String, dynamic> e) => SendGiftResult.fromJson(e))
          .toList() as M;
    }
    if (<SensitiveWordBean>[] is M) {
      return data
          .map<SensitiveWordBean>(
              (Map<String, dynamic> e) => SensitiveWordBean.fromJson(e))
          .toList() as M;
    }
    if (<AppLiveSignCard>[] is M) {
      return data
          .map<AppLiveSignCard>(
              (Map<String, dynamic> e) => AppLiveSignCard.fromJson(e))
          .toList() as M;
    }
    if (<TranslateData>[] is M) {
      return data
          .map<TranslateData>(
              (Map<String, dynamic> e) => TranslateData.fromJson(e))
          .toList() as M;
    }
    if (<TranslateDataConfigs>[] is M) {
      return data
          .map<TranslateDataConfigs>(
              (Map<String, dynamic> e) => TranslateDataConfigs.fromJson(e))
          .toList() as M;
    }
    if (<VipDartEntity>[] is M) {
      return data
          .map<VipDartEntity>(
              (Map<String, dynamic> e) => VipDartEntity.fromJson(e))
          .toList() as M;
    }
    if (<VipDartDiamondCard>[] is M) {
      return data
          .map<VipDartDiamondCard>(
              (Map<String, dynamic> e) => VipDartDiamondCard.fromJson(e))
          .toList() as M;
    }
    if (<VipDartChannelPays>[] is M) {
      return data
          .map<VipDartChannelPays>(
              (Map<String, dynamic> e) => VipDartChannelPays.fromJson(e))
          .toList() as M;
    }
    if (<SignData>[] is M) {
      return data
          .map<SignData>((Map<String, dynamic> e) => SignData.fromJson(e))
          .toList() as M;
    }
    if (<SignBean>[] is M) {
      return data
          .map<SignBean>((Map<String, dynamic> e) => SignBean.fromJson(e))
          .toList() as M;
    }
    if (<SocketEntity>[] is M) {
      return data
          .map<SocketEntity>(
              (Map<String, dynamic> e) => SocketEntity.fromJson(e))
          .toList() as M;
    }
    if (<SocketHostState>[] is M) {
      return data
          .map<SocketHostState>(
              (Map<String, dynamic> e) => SocketHostState.fromJson(e))
          .toList() as M;
    }
    if (<SocketBalance>[] is M) {
      return data
          .map<SocketBalance>(
              (Map<String, dynamic> e) => SocketBalance.fromJson(e))
          .toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (RTMText).toString(): RTMText.fromJson,
    (RTMUser).toString(): RTMUser.fromJson,
    (RTMMsgText).toString(): RTMMsgText.fromJson,
    (RTMMsgVoice).toString(): RTMMsgVoice.fromJson,
    (RTMMsgPhoto).toString(): RTMMsgPhoto.fromJson,
    (RTMMsgCallState).toString(): RTMMsgCallState.fromJson,
    (RTMMsgGift).toString(): RTMMsgGift.fromJson,
    (RTMMsgBeginCall).toString(): RTMMsgBeginCall.fromJson,
    (RTMMsgAIB).toString(): RTMMsgAIB.fromJson,
    (RTMMsgAIC).toString(): RTMMsgAIC.fromJson,
    (AiConfigEntity).toString(): AiConfigEntity.fromJson,
    (AiConfigGroups).toString(): AiConfigGroups.fromJson,
    (AiConfigGroupsItem).toString(): AiConfigGroupsItem.fromJson,
    (AivBean).toString(): AivBean.fromJson,
    (BalanceListEntity).toString(): BalanceListEntity.fromJson,
    (BalanceListData).toString(): BalanceListData.fromJson,
    (BannerBean).toString(): BannerBean.fromJson,
    (CallRecordEntity).toString(): CallRecordEntity.fromJson,
    (CardBean).toString(): CardBean.fromJson,
    (PayChannelBean).toString(): PayChannelBean.fromJson,
    (PayCommoditeBean).toString(): PayCommoditeBean.fromJson,
    (CreateOrderBean).toString(): CreateOrderBean.fromJson,
    (PayCutCommodite).toString(): PayCutCommodite.fromJson,
    (PayCutChannel).toString(): PayCutChannel.fromJson,
    (PayQuickData).toString(): PayQuickData.fromJson,
    (PayQuickCommodite).toString(): PayQuickCommodite.fromJson,
    (PayQuickChannel).toString(): PayQuickChannel.fromJson,
    (DiamondCardBean).toString(): DiamondCardBean.fromJson,
    (ConfigData).toString(): ConfigData.fromJson,
    (AppUpdate).toString(): AppUpdate.fromJson,
    (PayScale).toString(): PayScale.fromJson,
    (ContributeEntity).toString(): ContributeEntity.fromJson,
    (DrawEntity).toString(): DrawEntity.fromJson,
    (DrawData).toString(): DrawData.fromJson,
    (DrawUserEntity).toString(): DrawUserEntity.fromJson,
    (EndCallEntity).toString(): EndCallEntity.fromJson,
    (GiftEntity).toString(): GiftEntity.fromJson,
    (HostDetail).toString(): HostDetail.fromJson,
    (HostMedia).toString(): HostMedia.fromJson,
    (HostTag).toString(): HostTag.fromJson,
    (HostMatchLimitEntity).toString(): HostMatchLimitEntity.fromJson,
    (HostMatchLimitEntityAnchor).toString():
        HostMatchLimitEntityAnchor.fromJson,
    (UpListData).toString(): UpListData.fromJson,
    (AreaData).toString(): AreaData.fromJson,
    (InfoDetail).toString(): InfoDetail.fromJson,
    (BalanceBean).toString(): BalanceBean.fromJson,
    (InviteInfoEntity).toString(): InviteInfoEntity.fromJson,
    (LevalBean).toString(): LevalBean.fromJson,
    (LinkContent).toString(): LinkContent.fromJson,
    (Login).toString(): Login.fromJson,
    (LoginToken).toString(): LoginToken.fromJson,
    (LoginUser).toString(): LoginUser.fromJson,
    (MatchHost).toString(): MatchHost.fromJson,
    (MomentDetail).toString(): MomentDetail.fromJson,
    (MomentMedia).toString(): MomentMedia.fromJson,
    (OrderCheckEntity).toString(): OrderCheckEntity.fromJson,
    (OrderBean).toString(): OrderBean.fromJson,
    (OrderData).toString(): OrderData.fromJson,
    (CostBean).toString(): CostBean.fromJson,
    (OssConfig).toString(): OssConfig.fromJson,
    (AppRechargeActiveConfigEntity).toString():
        AppRechargeActiveConfigEntity.fromJson,
    (SendGiftResult).toString(): SendGiftResult.fromJson,
    (SensitiveWordBean).toString(): SensitiveWordBean.fromJson,
    (AppLiveSignCard).toString(): AppLiveSignCard.fromJson,
    (TranslateData).toString(): TranslateData.fromJson,
    (TranslateDataConfigs).toString(): TranslateDataConfigs.fromJson,
    (VipDartEntity).toString(): VipDartEntity.fromJson,
    (VipDartDiamondCard).toString(): VipDartDiamondCard.fromJson,
    (VipDartChannelPays).toString(): VipDartChannelPays.fromJson,
    (SignData).toString(): SignData.fromJson,
    (SignBean).toString(): SignBean.fromJson,
    (SocketEntity).toString(): SocketEntity.fromJson,
    (SocketHostState).toString(): SocketHostState.fromJson,
    (SocketBalance).toString(): SocketBalance.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
